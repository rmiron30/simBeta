-------------------------------------------------------------------

     =========================================================
     Geant4 - an Object-Oriented Toolkit for Simulation in HEP
     =========================================================

                            Example B3
                            ----------

 This example simulates schematically a Positron Emitted Tomography system.

 1- GEOMETRY DEFINITION

  In DetectorConstruction.cc, there are defined the geometries of the objects 
  and the materials which they are made of.

   The support of beta detection are plastic scintillators. 
   The detectors are positioned one in front of the other at 53 mm distance. 
   The implantation crystal is positioned equidistantly between the beta detectors.
   
   HOW TO CHANGE BETWEEN GEOMETRIES: ctrl+f for the words "2023" and "2024" in the code 
   and uncomment the lines specific to each case

   Summarized 2023 geometry:

   G4double betaside = 62 * mm, beta_dz = 6.3 * mm; // beta detectors dimensions
   G4double diameter = 10 * mm; 
   EJ 200;
   auto solidBetaF = new G4Box("betaF", 0.5 * betaside, 0.5 * betaside, 0.5 * beta_dz); //uncomment for 2023 geometry
   auto holeF = new G4Tubs("holeF", 0, 0.5 * diameter, corner_dz,0, twopi);
   G4double sample_radius = 0.5 * 12 * mm, sample_dZ = 0.5 * mm; // KCl
   Front at -29.65, back at +29.65

   Summarized 2024 geometry:

   G4double beta_dzF = 5 * mm; // beta detectors dimensions
   G4double diameterF = 20 * mm; // dimensions for the hole 
   EJ 204;
   auto solidBetaF = new G4Box("betaF", 0.5 * betaside, 0.5 * betaside, 0.5 * beta_dzF); // uncomment for 2024 geometry
   auto holeF = new G4Tubs("holeF", 0, 0.5 * diameterF, corner_dz,0, twopi);
   G4double sample_radius = 0.5 * 20 * mm, sample_dZ = 2. * mm;  // KCl
   Front at -29, back at +29.65

 2- PHYSICS LIST

   The physics list contains standard electromagnetic processes and the
   radioactiveDecay module for GenericIon. It is defined in the B3::PhysicsList
   class as a Geant4 modular physics list with registered physics builders
   provided in Geant4:
   - G4DecayPhysics - defines all particles and their decay processes
   - G4RadioactiveDecayPhysics - defines radioactiveDecay for GenericIon
   - G4EmStandardPhysics - defines all EM standard processes

   This physics list requires data files for:
   - low energy electromagnetic processes which path is defined via
     the G4LEDATA envirnoment variable
   - nuclides properties which path is defined via
     the G4ENSDFSTATEDATA envirnoment variable
   - radioactive decay hadronic processes which path is defined via
     the G4RADIOACTIVEDATA envirnoment variable.

   See more on installation of the datasets in Geant4 Installation Guide,
   Chapter 3.3: Note On Geant4 Datasets:
   http://geant4.web.cern.ch/geant4/UserDocumentation/UsersGuides
                                          /InstallationGuide/html/ch03s03.html
 3- ACTION INITALIZATION

   B3[a,b]::ActionInitialization class instantiates and registers to Geant4 kernel
   all user action classes.

   While in sequential mode the action classes are instatiated just once,
   via invoking the method:
      B3[a,b]::ActionInitialization::Build()
   in multi-threading mode the same method is invoked for each thread worker
   and so all user action classes are defined thread-local.

   A run action class is instantiated both thread-local
   and global that's why its instance is created also in the method
      B3[a,b]::ActionInitialization::BuildForMaster()
   which is invoked only in multi-threading mode.

 4- PRIMARY GENERATOR

    There are 2 types of primary generators:
    - for monoenergetic beams: the first code, using fParticleGun
    - for beta spectrum: the second block of code, using G4GeneralParticleSource

    In PrimaryGeneratorAction.cc and PrimaryGeneratorAction.hh

 5- DETECTOR RESPONSE:  scorers

  The deposited energy is scored in 1D histograms in the output file scoring.root.
  The deposited energy is scored in EventAction.cc
  The root file and histograms are created and can be edited in RunAction.cc
  There are 3 histograms: front, back and sample
  At the end of the run, the file scoring.root and the input file monobeta.in are copied in 
  a directory named with the current date and time
  IF the simulation is run with spectrumbeta.in, you have to change in the code which file to copy
  RunAction.cc, line 166  

 6- STACKING ACTION

   Beta decay of Fluor generates a neutrino. One wishes not to track this
   neutrino; therefore one kills it immediately, before created particles
   are put in a stack.
   The function B3::StackingAction::ClassifyNewTrack() is invoked by G4 kernel
   each time a new particle is created.

 A- VISUALISATION

   The visualization manager is set via the G4VisExecutive class
   in the main() function in exampleB3.cc.
   The initialisation of the drawing is done via a set of /vis/ commands
   in the macro vis.mac. This macro is automatically read from
   the main function when the example is used in interactive running mode.

   By default, vis.mac opens an OpenGL viewer (/vis/open OGL).
   The user can change the initial viewer by commenting out this line
   and instead uncommenting one of the other /vis/open statements, such as
   HepRepFile or DAWNFILE (which produce files that can be viewed with the
   HepRApp and DAWN viewers, respectively).  Note that one can always
   open new viewers at any time from the command line.  For example, if
   you already have a view in, say, an OpenGL window with a name
   "viewer-0", then
      /vis/open DAWNFILE
   then to get the same view
      /vis/viewer/copyView viewer-0
   or to get the same view *plus* scene-modifications
      /vis/viewer/set/all viewer-0
   then to see the result
      /vis/viewer/flush

   The DAWNFILE, HepRepFile drivers are always available
   (since they require no external libraries), but the OGL driver requires
   that the Geant4 libraries have been built with the OpenGL option.

   For more information on visualization, including information on how to
   install and run DAWN, OpenGL and HepRApp, see the visualization tutorials,
   for example,
   http://geant4.slac.stanford.edu/Presentations/vis/G4[VIS]Tutorial/G4[VIS]Tutorial.html
   (where [VIS] can be replaced by DAWN, OpenGL and HepRApp)

   The tracks are automatically drawn at the end of each event, accumulated
   for all events and erased at the beginning of the next run.

 B- USER INTERFACES

   The user command interface is set via the G4UIExecutive class
   in the main() function in exampleB3.cc
   The selection of the user command interface is then done automatically
   according to the Geant4 configuration or it can be done explicitly via
   the third argument of the G4UIExecutive constructor (see exampleB4a.cc).

C- HOW TO RUN

    - Execute exampleB3a in the 'interactive mode' with visualization
        % ./exampleB3a
      and type in the commands from run1.mac line by line:
        Idle> /control/verbose 2
        Idle> /tracking/verbose 2
        Idle> /run/beamOn 1
        Idle> ...
        Idle> exit
      or
        Idle> /control/execute run1.mac
        ....
        Idle> exit
    - monobeta.in -> input file for monoenergetic beams; you can change the energy of the electrons and
    the number of simulated particles; it is useful to write as a comment which geometry was put in Detector
    - spectrumbeta.in -> specifies the type of source, the beta spectrum file and the number of particles
    - Execute exampleB3a in the 'batch' mode from macro files
     (without visualization)
        % ./exampleB3a monobeta.in 
        % ./exampleB3a spectrumbeta.in


